class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        sort(tasks.begin(),tasks.end());
        int count=1;
        int minRounds=0;
        int initial=tasks[0];
        for(int i=1;i<tasks.size();++i){
            if(tasks[i]==initial)count++;
            else{
                if(count==1)return -1;
                //computer count to minRounds                                       T=O(NlogN +N)   sp= O(1)           // time more space less
                if(count%3==0)minRounds+=count/3;                                   // can be optimized to upperbound to calc frquncy 
                else minRounds+=count/3+1;
                count=1;
                initial=tasks[i];
            }
        }
        if(count==1) return -1;
        minRounds+=(count%3==0?count/3:count/3+1);
        return minRounds;
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        unordered_map<int,int>mp;
        int minRounds=0;
        for(auto x:tasks)mp[x]++;                                                               T=O(N)  sp=O(FREQ)~~ O(N)
        for(auto x:mp){
            if(x.second==1)return -1;
            else if(x.second%3==0)minRounds+=x.second/3;
            else minRounds+=x.second/3+1;
        }
        return minRounds;
    }
};
