lass Solution {
private:
    void dfs(TreeNode* root, int level,vector<int>&levelSum) {
        if(root==NULL) return ;
        if(level>=levelSum.size())levelSum.push_back(0);
        levelSum[level]+=root->val;
        dfs(root->left,level+1,levelSum);
        dfs(root->right,level+1,levelSum);

    }
public:
    int maxLevelSum(TreeNode* root) {
        if(root==NULL) return 0;
        int mx=INT_MIN;
        vector<int>levelSum;
        dfs(root,0,levelSum);
        int answer=1;
        for(int i=0;i<levelSum.size();++i){
            if(levelSum[i]>mx){
                mx=levelSum[i];
                answer=i+1;
            }
        }
        return answer;
    }
};



-----------------------------------------------------------------------------------------------------------------------------
USE DFS AS TIME COMPLEXITY IS SAME ie. o(NODES)  BUT SPACE COMPLEXITY IN DFS=heightTree :: BFS= LAST LEVEL=O(NODES/2)
