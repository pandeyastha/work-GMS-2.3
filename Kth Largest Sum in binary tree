/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int level, vector<long long int>&sum){
        if(root==NULL) return ;
        if(level==sum.size())sum.push_back(0);
        sum[level]+=root->val;
        dfs(root->left,level+1,sum);
        dfs(root->right,level+1,sum);
    }
    long long kthLargestLevelSum(TreeNode* root, int k) {
        if(root==NULL) return -1;
       
        vector<long long int>sum;
        dfs(root,0,sum);
         priority_queue<long long int,vector<long long int>,greater<long long int>>pq;
        for(auto x:sum){
            pq.push(x);
            if(pq.size()>k) pq.pop();
        }
        if(pq.size()<k) return -1;
        return pq.top();
        
    }
};
