/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int height(TreeNode* root){
        if(root==NULL) return 0;
        return 1+max(height(root->left),height(root->right));
        }
    void dfs(TreeNode* root,int level,int &sum,int &depth){
        if(root==NULL) return ;
        if(level+1==depth)sum+=root->val;
        if(root->left)dfs(root->left,level+1,sum,depth);
        if(root->right)dfs(root->right,level+1,sum,depth);
        return ;
    }
public:
    int deepestLeavesSum(TreeNode* root) {
        if(root==NULL) return 0;
        int sum=0;
        int depth=height(root);
        dfs(root,0,sum,depth);
        return sum;
    }
};
