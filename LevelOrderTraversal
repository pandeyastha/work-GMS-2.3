class Solution {
private:
void dfs(TreeNode* root, int level, vector<vector<int>>&levelOrder){
    if(root==NULL)return;
    if(level==levelOrder.size())levelOrder.push_back({});
    levelOrder[level].push_back(root->val);
    dfs(root->left,level+1,levelOrder);
    dfs(root->right,level+1,levelOrder);
}
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root==NULL) return {};
        vector<vector<int>>levelOrder;
        dfs(root,0,levelOrder);
        return levelOrder;
    }
};


------------------------------          TC=O(nodes)  as dfs  sp=o(heights)      --------------------------------
-------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------



                                                                        BFS   TC=O(NODES)  sp=O(N/2)
                                                                        ----------------------------
 class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root==NULL) return{};
        vector<vector<int>>result;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int sz=q.size();
            vector<int>level;
            for(int i=0;i<sz;++i){
                TreeNode* temp=q.front();q.pop();
                level.push_back(temp->val);
                if(temp->left)q.push(temp->left);
                if(temp->right)q.push(temp->right);
            }
            result.push_back(level);
        }
        return result;
        
    }
};
